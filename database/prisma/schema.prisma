generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                           String               @id @default(uuid())
  email                        String?              @unique
  phone                        String?
  countryCode                  String?
  password                     String
  firstName                    String
  lastName                     String
  profileImage                 String?
  role                         UserRole             @default(CUSTOMER)
  isEmailVerified              Boolean              @default(false)
  isPhoneVerified              Boolean              @default(false)
  lastLoginAt                  DateTime?
  createdAt                    DateTime             @default(now())
  updatedAt                    DateTime             @updatedAt
  addresses                    Address[]            @relation("UserAddresses")
  cart                         Cart?
  Chat                         Chat[]
  deliveryAssignments          DeliveryAssignment[] @relation("DeliveryDriver")
  deviceSessions               DeviceSession[]
  favorites                    Favorite[]
  loyaltyPointsHistory         LoyaltyPoint[]
  notifications                Notification[]
  orders                       Order[]
  Review_Review_entityIdToUser Review[]             @relation("Review_entityIdToUser")
  reviews                      Review[]
  Reward                       Reward[]
  ownedStores                  Store[]              @relation("StoreVendor")
  Task                         Task[]

  @@unique([phone, countryCode])
}

model Address {
  id         String      @id @default(uuid())
  userId     String
  type       AddressType @default(HOME)
  address    String
  city       String
  state      String
  country    String
  postalCode String?
  latitude   Float
  longitude  Float
  isDefault  Boolean     @default(false)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  user       User        @relation("UserAddresses", fields: [userId], references: [id], onDelete: Cascade)
  Order      Order[]
}

model Category {
  id        String    @id @default(uuid())
  name      String
  imageUrl  String?
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]
}

model Brand {
  id        String    @id @default(uuid())
  name      String
  imageUrl  String?
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]
}

model Store {
  id            String    @id @default(uuid())
  name          String
  description   String?
  imageUrl      String?
  vendorId      String
  isActive      Boolean   @default(true)
  averageRating Float?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  products      Product[]
  Review        Review[]
  vendor        User      @relation("StoreVendor", fields: [vendorId], references: [id])
}

model Product {
  id                 String           @id @default(uuid())
  name               String
  description        String?
  price              Float
  discountedPrice    Float?
  discountPercentage Float?
  stock              Int              @default(0)
  minStock           Int              @default(0)
  imageUrl           String?
  tags               String[]
  isActive           Boolean          @default(true)
  averageRating      Float?
  reviewCount        Int              @default(0)
  categoryId         String?
  brandId            String?
  storeId            String
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  cartItems          CartItem[]
  favorites          Favorite[]
  orderItems         OrderItem[]
  brand              Brand?           @relation(fields: [brandId], references: [id])
  category           Category?        @relation(fields: [categoryId], references: [id])
  store              Store            @relation(fields: [storeId], references: [id])
  variants           ProductVariant[]
  Review             Review[]
}

model Cart {
  id        String     @id @default(uuid())
  userId    String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     CartItem[]
}

model CartItem {
  id             String   @id @default(uuid())
  cartId         String
  productId      String
  quantity       Int
  variantOptions Json?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  cart           Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product        Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([cartId, productId])
}

model ProductVariant {
  id        String   @id @default(uuid())
  productId String
  name      String
  value     String
  price     Float?
  stock     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Favorite {
  id        String   @id @default(uuid())
  userId    String
  productId String
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
}

model Banner {
  id         String     @id @default(uuid())
  imageUrl   String
  title      String
  subtitle   String?
  actionText String?
  actionUrl  String?
  type       BannerType
  isActive   Boolean    @default(true)
  sortOrder  Int        @default(0)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model Order {
  id                 String               @id @default(uuid())
  trackingId         String               @unique @default(cuid())
  userId             String
  addressId          String
  status             OrderStatus          @default(PENDING)
  subtotal           Float
  discountAmount     Float                @default(0)
  discountCodeId     String?
  deliveryFee        Float                @default(0)
  tax                Float                @default(0)
  totalAmount        Float
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  deliveryAssignment DeliveryAssignment[]
  Address            Address              @relation(fields: [addressId], references: [id])
  discountCode       DiscountCode?        @relation(fields: [discountCodeId], references: [id])
  user               User                 @relation(fields: [userId], references: [id])
  orderItems         OrderItem[]
  payment            Payment[]
  Review             Review[]
}

model DiscountCode {
  id            String       @id @default(uuid())
  code          String       @unique
  type          DiscountType
  value         Float
  minOrderValue Float?
  maxDiscount   Float?
  usageLimit    Int?
  usedCount     Int          @default(0)
  isActive      Boolean      @default(true)
  startDate     DateTime
  endDate       DateTime
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  orders        Order[]
}

model OrderItem {
  id        String   @id @default(uuid())
  orderId   String
  productId String
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id])
}

model OTPVerification {
  id         String   @id @default(uuid())
  identifier String
  otpHash    String
  type       OTPType
  requestId  String   @unique
  attempts   Int      @default(0)
  maxAttempts Int     @default(5)
  resendAvailableAt DateTime?
  consumedAt DateTime?
  isVerified Boolean  @default(false)
  expiresAt  DateTime
  createdAt  DateTime @default(now())

  @@index([identifier, type])
}

model DeviceSession {
  id           String   @id @default(uuid())
  userId       String
  deviceId     String
  deviceType   String
  refreshToken String   @unique
  isActive     Boolean  @default(true)
  lastUsedAt   DateTime @default(now())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, deviceId])
}

model Payment {
  id        String        @id @default(uuid())
  orderId   String
  amount    Float
  method    PaymentMethod
  status    PaymentStatus @default(PENDING)
  reference String?
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  order     Order         @relation(fields: [orderId], references: [id])
}

model DeliveryAssignment {
  id        String         @id @default(uuid())
  orderId   String
  driverId  String
  status    DeliveryStatus @default(PENDING)
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  driver    User           @relation("DeliveryDriver", fields: [driverId], references: [id])
  order     Order          @relation(fields: [orderId], references: [id])
}

model Task {
  id          String     @id @default(uuid())
  title       String
  description String?
  type        TaskType
  status      TaskStatus @default(PENDING)
  assignedTo  String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  User        User?      @relation(fields: [assignedTo], references: [id])
}

model Notification {
  id        String           @id @default(uuid())
  userId    String
  title     String
  message   String
  type      NotificationType
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Chat {
  id        String   @id @default(uuid())
  userId    String
  message   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User     @relation(fields: [userId], references: [id])
}

model LoyaltyPoint {
  id        String   @id @default(uuid())
  userId    String
  points    Int
  reason    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Reward {
  id          String     @id @default(uuid())
  userId      String
  type        RewardType
  value       Float
  description String
  isRedeemed  Boolean    @default(false)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  User        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Promotion {
  id          String        @id @default(uuid())
  title       String
  description String
  type        PromotionType
  value       Float
  isActive    Boolean       @default(true)
  startDate   DateTime
  endDate     DateTime
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model Review {
  id                         String           @id @default(uuid())
  userId                     String
  entityType                 ReviewEntityType
  entityId                   String
  rating                     Int
  comment                    String?
  createdAt                  DateTime         @default(now())
  updatedAt                  DateTime         @updatedAt
  User_Review_entityIdToUser User             @relation("Review_entityIdToUser", fields: [entityId], references: [id], map: "Review_Driver_fkey")
  Order                      Order            @relation(fields: [entityId], references: [id], map: "Review_Order_fkey")
  Product                    Product          @relation(fields: [entityId], references: [id], map: "Review_Product_fkey")
  Store                      Store            @relation(fields: [entityId], references: [id], map: "Review_Store_fkey")
  user                       User             @relation(fields: [userId], references: [id])
}

enum UserRole {
  CUSTOMER
  DRIVER
  VENDOR
  ADMIN
}

enum AddressType {
  HOME
  WORK
  OTHER
}

enum BannerType {
  PROMOTIONAL
  CATEGORY
  PRODUCT
}

enum DiscountType {
  PERCENTAGE
  FIXED_AMOUNT
}

enum OTPType {
  REGISTRATION
  LOGIN
  PASSWORD_RESET
}

enum OrderStatus {
  PENDING
  ACCEPTED
  PREPARING
  PACKING
  OUT_FOR_DELIVERY
  DELIVERED
  CANCELLED
  COMPLETED
}

enum PaymentStatus {
  PENDING
  PAID
  REFUNDED
  FAILED
}

enum PaymentMethod {
  CREDIT_CARD
  DEBIT_CARD
  MOBILE_MONEY
  CASH_ON_DELIVERY
  OTHER
}

enum DeliveryStatus {
  PENDING
  ASSIGNED
  PICKED_UP
  IN_TRANSIT
  DELIVERED
  FAILED
}

enum TaskStatus {
  PENDING
  ASSIGNED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum TaskType {
  DELIVERY
  PICKUP
  ERRAND
  OTHER
}

enum NotificationType {
  ORDER_UPDATE
  DELIVERY_UPDATE
  PROMOTION
  SYSTEM
  CHAT
}

enum RewardType {
  POINTS
  DISCOUNT
  FREE_DELIVERY
  OTHER
}

enum PromotionType {
  DISCOUNT
  CASHBACK
  FREE_DELIVERY
  BUY_ONE_GET_ONE
  OTHER
}

enum ReviewEntityType {
  PRODUCT
  STORE
  DRIVER
  ORDER
}
